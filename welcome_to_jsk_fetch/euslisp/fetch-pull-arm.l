#!/usr/bin/env roseus

(ros::roseus-add-msgs "geometry_msgs")
(load "package://fetcheus/fetch-interface.l")

(defun wrenchstamped-to-list (wrench)
  (let ((force (send (send wrench :wrench) :force)))
    (list (send force :x) (send force :y)  (send force :z))))

(defun force-calibration ()
  (let (zero x-pull y-pull)
    (send *ri* :speak-jp "キャリブレーションをします")
    (send *ri* :speak-jp "手に触れないでください" :wait t)
    (send *ri* :speak-jp "さん" :wait t)
    (unix:sleep 1)
    (send *ri* :speak-jp "に" :wait t)
    (unix:sleep 1)
    (send *ri* :speak-jp "いち")
    (let ((sum (list 0 0 0)) tmp (sample 25))
      (dotimes (i sample)
	      (ros::ros-info "~A" tmp)
        (setq tmp (wrenchstamped-to-list (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped)))
        (setq sum (list (+ (elt sum 0) (elt tmp 0))
                        (+ (elt sum 1) (elt tmp 1))
                        (+ (elt sum 2) (elt tmp 2)))))
      (setq zero (list (/ (elt sum 0) sample)
                       (/ (elt sum 1) sample)
                       (/ (elt sum 2) sample)))
      (ros::ros-info "zero:~A" zero))

    (send *ri* :speak-jp "前にひいてください")
    (let ((sum 0) (tmp (elt zero 0)) (sample 40))
      (while (< (- tmp (elt zero 0)) 1.5)
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 0)))
      (ros::ros-info "info")
      (send *ri* :speak-jp "さん" :wait t)
      (unix:sleep 1)
      (send *ri* :speak-jp "に")
      (dotimes (i (floor (/ sample 2)))
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 0))
        (setq sum (+ sum tmp)))
      (ros::ros-info "info2")
      (send *ri* :speak-jp "いち")
      (dotimes (i (ceiling (/ sample 2)))
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 0))
        (setq sum (+ sum tmp)))
      (setq x-pull (list (/ sum sample) 0)))

    (send *ri* :speak-jp "後ろに引いてください")
    (let ((sum 0) (tmp (elt zero 0)) (sample 40))
      (while (> (- tmp (elt zero 0)) -1.5)
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 0)))
      (ros::ros-info "info")
      (send *ri* :speak-jp "さん" :wait t)
      (unix:sleep 1)
      (send *ri* :speak-jp "に")
      (dotimes (i (floor (/ sample 2)))
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 0))
        (setq sum (+ sum tmp)))
      (ros::ros-info "info2")
      (send *ri* :speak-jp "いち")
      (dotimes (i (ceiling (/ sample 2)))
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 0))
        (setq sum (+ sum tmp)))
      (setq x-pull (list (elt x-pull 0) (/ sum sample)))
      (ros::ros-info "x-:~A" x-pull))

    (send *ri* :speak-jp "左に引いてください")
    (let ((sum 0) (tmp (elt zero 1)) (sample 40))
      (while (< (- tmp (elt zero 1)) 1.5)
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 1)))
      (ros::ros-info "info")
      (send *ri* :speak-jp "さん" :wait t)
      (unix:sleep 1)
      (send *ri* :speak-jp "に")
      (dotimes (i (floor (/ sample 2)))
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 1))
        (setq sum (+ sum tmp)))
      (ros::ros-info "info2")
      (send *ri* :speak-jp "いち")
      (dotimes (i (ceiling (/ sample 2)))
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 1))
        (setq sum (+ sum tmp)))
      (setq y-pull (list (/ sum sample) 0)))

    (send *ri* :speak-jp "右に引いてください")
    (let ((sum 0) (tmp (elt zero 1)) (sample 40))
      (while (> (- tmp (elt zero 1)) -1.5)
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 1)))
      (ros::ros-info "info")
      (send *ri* :speak-jp "さん" :wait t)
      (unix:sleep 1)
      (send *ri* :speak-jp "に")
      (dotimes (i (floor (/ sample 2)))
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 1))
        (setq sum (+ sum tmp)))
      (ros::ros-info "info2")
      (send *ri* :speak-jp "いち")
      (dotimes (i (ceiling (/ sample 2)))
	      (ros::ros-info "~A" tmp)
    	  (setq msg (one-shot-subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped ))
        (setq tmp (elt (wrenchstamped-to-list msg) 1))
        (setq sum (+ sum tmp)))
      (setq y-pull (list (elt y-pull 0) (/ sum sample)))
      (ros::ros-info "y-pull:~A" y-pull))

    (send *ri* :speak-jp "終了しました")
    (list zero x-pull y-pull)))

(defclass pull-arm
    :slots (std-zero std-x std-y force x-list y-list tmp-x tmp-y))

(defmethod pull-arm
    (:init (calib)
     (let* ((ret (if calib
                     (force-calibration)
                     (list (list 1.5 0.8 -3) (list 3.5 -1.5) (list 2.0 -0.5)))))
       (setq std-zero (car ret))
       (setq std-x (cadr ret))
       (setq std-y (caddr ret))
       (ros::ros-info "zero: ~A~% x: ~A~% y: ~A~%" std-zero std-x std-y)
       (ros::subscribe "/end_effector/wrench_transformed" geometry_msgs::WrenchStamped #'send self :wrench-cb)
       (setq x-list (list 0))
       (setq y-list (list 0))
       self))
     (:wrench-cb
      (msg)
      (setq force (send (send msg :wrench) :force)))

     (:check (axis)
             ()
             (when (eq axis :x)
               (dolist (i x-list)
                 (unless (> (abs i) 1.8)
                   (return-from :check nil))))
             (when (eq axis :y)
               (dolist (i y-list)
                 (unless (> (abs i) 1)
                   (return-from :check nil))))
             t)

     (:look-at-hand()
                   (let ((pan (rad2deg (atan tmp-y tmp-x))) (tilt (+ 25 (* 2 tmp-z))))
                     (if (> pan 0)
                         (setq pan (min pan 165))
                         (setq pan (max pan -165)))
                     (if (> tilt 0)
                         (setq tilt (min tilt 55))
                         (setq tilt (max tilt -25)))
                     (send *fetch* :head :angle-vector (float-vector pan 15))

                     ;; (send *fetch* :angle-vector (send *ri* :state :potentio-vector))
                     ;; (setq end-pos (send *fetch* :rarm :end-coords :worldpos))
                     ;; (setq wrench-pos (float-vector (+ (elt end-pos 0) (* (/ 500 (sqrt (+ (expt tmp-x 2) (expt tmp-y 2)))) tmp-x))
                     ;;                                (+ (elt end-pos 1) (* (/ 500 (sqrt (+ (expt tmp-x 2) (expt tmp-y 2)))) tmp-y))
                     ;;                                1400))
                     ;; (send *fetch* :head :look-at wrench-pos :revert-if-fail nil)
                     (send *ri* :angle-vector-raw (send *fetch* :angle-vector) 1200 :head-controller)))

     (:run ()
           (unless (null force)
             (setq tmp-x (- (send force :x) (elt std-zero 0)))
             (setq tmp-y (- (send force :y) (elt std-zero 1)))
             (setq tmp-z (- (send force :z) (elt std-zero 2)))
	           ;; (ros::ros-info "x: ~A  y: ~A z: ~A" tmp-x tmp-y tmp-z)
             ;; (send self :look-at-hand)
             (block move
               (when (send self :check :x)
                 (when (> tmp-x (- (elt std-x 0) (elt std-zero 0)))
                   (send *ri* :send-cmd-vel-raw (/ (log tmp-x) 4.0) 0 :topic-name "/base_controller/cmd_vel"))
                 (when (< tmp-x (- (elt std-x 1) (elt std-zero 1)))
                   (send *ri* :send-cmd-vel-raw (- (/ (log (abs tmp-x)) 5.0)) 0 :topic-name "/base_controller/cmd_vel"))
                 (return-from move nil))

               (when (send self :check :y)
                 (when (> tmp-y (- (elt std-y 0) (elt std-zero 1)))
                   (send *ri* :send-cmd-vel-raw 0 (/ (log tmp-y) 3.0) :topic-name "/base_controller/cmd_vel"))
                 (when (< tmp-y (- (elt std-y 1) (elt std-zero 1)))
                   (send *ri* :send-cmd-vel-raw 0 (- (/ (log (abs tmp-y)) 3.0)) :topic-name "/base_controller/cmd_vel"))
                 (return-from move nil))

	             )

             (when (> (length x-list) 22)
               (setq x-list (cdr x-list)))
             (setq x-list (append x-list (list tmp-x)))

             (when (> (length y-list) 12)
               (setq y-list (cdr y-list)))
             (setq y-list (append y-list (list tmp-y))))))

(ros::roseus "pull_arm")
(fetch-init nil)
(send *ri* :angle-vector #f(22.4077 66.8381 49.9094 -124.795 128.259 -49.9694 46.1586 23.8993 0.050981 1.7321))
(send *ri* :wait-interpolation)
(setq *pa* (instance pull-arm :init nil))
(ros::rate 70)
(do-until-key
    (ros::spin-once)
  (send *pa* :run)
  (ros::sleep))
