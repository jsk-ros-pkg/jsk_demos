<!-- -*- mode: xml -*- -->
<launch>
  <!--
  ;; This launch file is copied from jsk_pcl_ros/launch.
  ;; To use this,
  $ roslaunch openni_launch openni.launch    ;; start kinect camera
  $ rosrun rqt_reconfigure rqt_reconfigure   ;; parameter settings
  $ roslaunch jsk_pcl_ros hsi_color_filter.launch DEFAULT_NAMESPACE:=/camera/depth_registered INPUT:=points
  ;; subscribe camera/depth_registered/hsi_output
  ;; subscribe tf and find /target
  -->
  <arg name="INPUT" default="/head_camera/depth_registered/points"/>
  <arg name="CENTROID_FRAME" default="target"/>
  <arg name="DEFAULT_NAMESPACE_1" default="HSI_color_filter_1"/>
  <arg name="DEFAULT_NAMESPACE_2" default="HSI_color_filter_2"/>
  <arg name="FILTER_NAME_SUFFIX" default=""/>
  <arg name="OUTPUT" default="hsi_output$(arg FILTER_NAME_SUFFIX)"/>

  <arg name="h_max" default="10" doc="maximum hue 127 corresponds to pi. When we define M as (max r g b), m as (r g b) and c as M-m, hue is calculated as 1. undifined (if c=0) 2. (((g-b)/6)*mod6)*60-180 (if M=r) 3. (((b-r)/c)+2)*60-180 (if M=g) 4. (((r-g)/c)+4)*60-180 (if M=b)"/>
  <arg name="h_min" default="-30" doc="minimum hue -128 corresponds to -pi. When we define M as (max r g b), m as (r g b) and c as M-m, hue is calculated as 1. undifined (if c=0) 2. (((g-b)/6)*mod6)*60-180 (if M=r) 3. (((b-r)/c)+2)*60-180 (if M=g) 4. (((r-g)/c)+4)*60-180 (if M=b)" />
  <arg name="s_max" default="255" doc="maximum satuation 255 corresponds to 1. Satuation is calucrated as (1-(min r g b)/intensity) * 255"/>
  <arg name="s_min" default="100" doc="minimum satuation 0 corresponds to 0. Satuation is calucrated as (1-(min r g b)/intensity) * 255"/>
  <arg name="i_max" default="200" doc="maximum intensity 255 corresponds to 1. Intensity is calculated as (r + g + b)/3"/>
  <arg name="i_min" default="50" doc="minimum intensity 0 corresponds to 0. Intensity is calculated as (r + g + b)/3"/>

  <arg name="h_max_2" default="127" doc="maximum hue 127 corresponds to pi. When we define M as (max r g b), m as (r g b) and c as M-m, hue is calculated as 1. undifined (if c=0) 2. (((g-b)/6)*mod6)*60-180 (if M=r) 3. (((b-r)/c)+2)*60-180 (if M=g) 4. (((r-g)/c)+4)*60-180 (if M=b)"/>
  <arg name="h_min_2" default="35" doc="minimum hue -128 corresponds to -pi. When we define M as (max r g b), m as (r g b) and c as M-m, hue is calculated as 1. undifined (if c=0) 2. (((g-b)/6)*mod6)*60-180 (if M=r) 3. (((b-r)/c)+2)*60-180 (if M=g) 4. (((r-g)/c)+4)*60-180 (if M=b)" />
  <arg name="s_max_2" default="255" doc="maximum satuation 255 corresponds to 1. Satuation is calucrated as (1-(min r g b)/intensity) * 255"/>
  <arg name="s_min_2" default="29" doc="minimum satuation 0 corresponds to 0. Satuation is calucrated as (1-(min r g b)/intensity) * 255"/>
  <arg name="i_max_2" default="255" doc="maximum intensity 255 corresponds to 1. Intensity is calculated as (r + g + b)/3"/>
  <arg name="i_min_2" default="150" doc="minimum intensity 0 corresponds to 0. Intensity is calculated as (r + g + b)/3"/>

  <arg name="create_manager" default="true" />
  <arg name="manager" default="hsi_filter_manager$(arg FILTER_NAME_SUFFIX)" />

  <group ns="$(arg DEFAULT_NAMESPACE_1)">
    <node if="$(arg create_manager)"
          pkg="nodelet" type="nodelet" name="$(arg manager)"
          args="manager" output="screen"/>

    <node pkg="nodelet" type="nodelet" name="hsi_filter$(arg FILTER_NAME_SUFFIX)"
          args="standalone jsk_pcl/HSIColorFilter $(arg manager)" output="screen">
      <remap from="~input" to="$(arg INPUT)" />
      <remap from="~output" to="$(arg OUTPUT)" />
      <rosparam>
        use_indices: false
        keep_organized: true
      </rosparam>
      <param name="h_limit_max" value="$(arg h_max)" />
      <param name="h_limit_min" value="$(arg h_min)" />
      <param name="s_limit_max" value="$(arg s_max)" />
      <param name="s_limit_min" value="$(arg s_min)" />
      <param name="i_limit_max" value="$(arg i_max)" />
      <param name="i_limit_min" value="$(arg i_min)" />
    </node>
    <node pkg="nodelet" type="nodelet" name="euclidean_clustering$(arg FILTER_NAME_SUFFIX)"
          args="standalone jsk_pcl/EuclideanClustering $(arg manager)" output="screen" respawn="true">
      <remap from="~input" to="$(arg OUTPUT)" />
      <rosparam>
        tolerance: 0.1
        min_size: 500
      </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet"
          name="cluster_decomposer$(arg FILTER_NAME_SUFFIX)"
          args="standalone jsk_pcl/ClusterPointIndicesDecomposerZAxis $(arg manager)"
          output="screen" clear_params="true" respawn="true">
      <remap from="~input" to="$(arg OUTPUT)" />
      <remap from="~target" to="euclidean_clustering$(arg FILTER_NAME_SUFFIX)/output" />
      <!-- <remap from="~debug_output" to="debug_output$(arg FILTER_NAME_SUFFIX)" /> -->
      <remap from="~boxes" to="boxes$(arg FILTER_NAME_SUFFIX)" />
      <rosparam>
      </rosparam>
    </node>


  </group>

  <group ns="$(arg DEFAULT_NAMESPACE_2)">
    <node if="$(arg create_manager)"
          pkg="nodelet" type="nodelet" name="$(arg manager)"
          args="manager" output="screen"/>

    <node pkg="nodelet" type="nodelet" name="hsi_filter$(arg FILTER_NAME_SUFFIX)"
          args="standalone jsk_pcl/HSIColorFilter $(arg manager)" output="screen">
      <remap from="~input" to="$(arg INPUT)" />
      <remap from="~output" to="$(arg OUTPUT)" />
      <rosparam>
        use_indices: false
        keep_organized: true
      </rosparam>
      <param name="h_limit_max" value="$(arg h_max_2)" />
      <param name="h_limit_min" value="$(arg h_min_2)" />
      <param name="s_limit_max" value="$(arg s_max_2)" />
      <param name="s_limit_min" value="$(arg s_min_2)" />
      <param name="i_limit_max" value="$(arg i_max_2)" />
      <param name="i_limit_min" value="$(arg i_min_2)" />
    </node>
    <node pkg="nodelet" type="nodelet" name="euclidean_clustering$(arg FILTER_NAME_SUFFIX)"
          args="standalone jsk_pcl/EuclideanClustering $(arg manager)" output="screen" respawn="true">
      <remap from="~input" to="$(arg OUTPUT)" />
      <rosparam>
        tolerance: 0.1
        min_size: 500
      </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet"
          name="cluster_decomposer$(arg FILTER_NAME_SUFFIX)"
          args="standalone jsk_pcl/ClusterPointIndicesDecomposerZAxis $(arg manager)"
          output="screen" clear_params="true" respawn="true">
      <remap from="~input" to="$(arg OUTPUT)" />
      <remap from="~target" to="euclidean_clustering$(arg FILTER_NAME_SUFFIX)/output" />
      <!-- <remap from="~debug_output" to="debug_output$(arg FILTER_NAME_SUFFIX)" /> -->
      <remap from="~boxes" to="boxes$(arg FILTER_NAME_SUFFIX)" />
      <rosparam>
      </rosparam>
    </node>


  </group>

</launch>
