<launch>
  <arg name="INPUT_IMAGE" default="/multisense/left/image_rect_color"/>
  <arg name="INPUT_CAMERA_INFO" default="/multisense/left/camera_info"/>
  <arg name="INPUT_POINT_CLOUD" default="/multisense/resize_1_4/points" />
  <arg name="CAMERA_FRAME_ID" default="/left_camera_optical_frame" />
  <arg name="IMU" default="/multisense/imu/imu_data" />
  <arg name="LAUNCH_MANAGER" default="true" />
  <arg name="MANAGER" default="drill_manager" />
  <arg name="DRILL_RECOGNITION_NAMESPACE" default="drill_recognition" />
  <arg name="STAND_ALONE" default="false" />
  <arg name="SAVE_CLOUD" default="false" />
  <group if="$(arg LAUNCH_MANAGER)">
    <node pkg="nodelet" type="nodelet" name="$(arg MANAGER)"
          args="manager"
          output="screen"/>
  </group>
  <group ns="$(arg DRILL_RECOGNITION_NAMESPACE)">
    <!-- clustering -->
    <node pkg="image_view2" type="image_view2" name="image_view2" if="$(arg STAND_ALONE)">
      <remap from="image" to="/multisense/left/image_rect_color" />
    </node>
    <node pkg="jsk_perception" type="rect_to_mask_image"
          name="rect_to_mask_image" output="screen">
      <remap from="~input" to="input_rect" unless="$(arg STAND_ALONE)"/>
      <remap from="~input" to="/multisense/left/image_rect_color/screenrectangle" if="$(arg STAND_ALONE)"/>
      <remap from="~input/camera_info" to="$(arg INPUT_CAMERA_INFO)" />
    </node>
    <node pkg="jsk_topic_tools" type="passthrough" name="passthrough">
      <remap from="~input" to="$(arg INPUT_POINT_CLOUD)" />
    </node>
    <!-- <node pkg="jsk_perception" type="rect_to_mask_image" -->
    <!--     name="rect_to_mask_image" output="screen"> -->
    <!--   <remap from="~input" to="input_rect" /> -->
    <!--   <remap from="~input/camera_info" to="$(arg INPUT_CAMERA_INFO)" /> -->
    <!-- </node> -->
    <node pkg="jsk_pcl_ros" type="supervoxel_segmentation" name="supervoxel_segmentation"
          output="screen">
      <remap from="~input" to="passthrough/output" />
    </node>
    
    <node pkg="nodelet" type="nodelet" name="supervoxel_normal"
	  args="standalone pcl/NormalEstimation">
      <remap from="~input" to="supervoxel_segmentation/output/cloud" />
      <rosparam>
        k_search: 0
        radius_search: 0.1
        spatial_locator: 1
      </rosparam>
    </node>

    <node pkg="jsk_pcl_ros" type="normal_concatenater" name="supervoxel_normal_concat">
      <remap from="~input" to="supervoxel_segmentation/output/cloud" />
      <remap from="~normal" to="supervoxel_normal/output" />
      <rosparam>
        use_async: true
      </rosparam>
    </node>

    <node pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" name="supervoxel_segmentation_decomposer">
      <remap from="~input" to="supervoxel_normal_concat/output" />
      <remap from="~target" to="supervoxel_segmentation/output/indices" />
    </node>
    <node pkg="jsk_pcl_ros" type="mask_image_cluster_filter" name="mask_image_cluster_filter">
      <remap from="~input" to="supervoxel_normal_concat/output"/>    
      <remap from="~target" to="supervoxel_segmentation/output/indices" />
      <remap from="~input/mask" to="rect_to_mask_image/output"/>
      <remap from="~input/camera_info" to="$(arg INPUT_CAMERA_INFO)" />
    </node>
    <node pkg="nodelet" type="nodelet" name="filtered_cloud"
          args="standalone pcl/ExtractIndices"> <!-- for debug  -->
          <!-- args="load pcl/ExtractIndices $(arg MANAGER)"> -->
      <remap from="~input" to="supervoxel_normal_concat/output"/>
      <remap from="~indices" to="mask_image_cluster_filter/output"/>
    </node>
    

    <!-- imu_based_icp -->
    <node pkg="jsk_pcl_ros" type="calculate_polygon_from_imu.py"
          name="calc_polygon">
      <remap from="imu_data" to="$(arg IMU)" />
    </node>
    <node pkg="nodelet" type="nodelet" name="polygon_transformer"
          args="standalone jsk_pcl/PolygonArrayTransformer" >
          <!-- args="load jsk_pcl/PolygonArrayTransformer /$(arg MANAGER)"> -->
      <remap from="~input_polygons" to="polygon_array"/>
      <remap from="~input_coefficients" to="model_coefficients_array" />
      <param name="frame_id" value="$(arg CAMERA_FRAME_ID)" />
    </node>
    <!-- <node pkg="nodelet" type="nodelet" name="add_cluster" -->
    <!--       args="load jsk_pcl/PointCloudToClusterPointIndices $(arg MANAGER)" -->
    <!--       output="screen" > -->
    <node pkg="jsk_pcl_ros" type="pointcloud_to_cluster_point_indices" name="add_cluster">
      <remap from="~input" to="filtered_cloud/output" />
    </node>
    <!-- <node pkg="nodelet" type="nodelet" -->
    <!--       name="cluster_decomposer_one" -->
    <!--       args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg MANAGER)" -->
    <!--     output="screen"> -->
    <node pkg="jsk_pcl_ros" type="plane_time_ensync_for_recognition.py" name="time_ensync" >
      <remap from="timer" to="filtered_cloud/output" />
      <remap from="planes" to="polygon_transformer/output_polygons" />
      <remap from="planes_coefficients"
             to="polygon_transformer/output_coefficients" />
    </node>
    <node pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" name="cluster_decomposer_one">
      <remap from="~input" to="filtered_cloud/output" />
      <remap from="~target" to="add_cluster/output" />
      <remap from="~align_planes" to="ensynced_planes" />
      <remap from="~align_planes_coefficients"
             to="ensynced_planes_coefficients" />
      <rosparam>
        align_boxes: true
        use_pca: true
        publish_clouds: false
        publish_tf: false
      </rosparam>
    </node>

    <node pkg="jsk_pcl_ros" type="box_array_to_box.py"
          name="box_array_to_box">
      <remap from="bounding_box_array" to="cluster_decomposer_one/boxes" />
    </node>
    <node pkg="nodelet" type="nodelet" name="icp_registration"
          args="standalone jsk_pcl/ICPRegistration">
      <remap from="~input" to="filtered_cloud/output" />
      <remap from="~input_box" to="bounding_box" />
      <remap from="~input_reference" to="template_normal_concat/output" />
      <rosparam>
        align_box: true
        use_normal: false
        max_iteration: 10000
        correspondence_distance: 0.1
        transform_epsilon: 0.001
        euclidean_fittness_epsilon: 0.001
        rotation_epsilon: 0.002
        use_flipped_initial_pose: false
      </rosparam>
    </node>
    <!-- <node pkg="nodelet" type="nodelet" name="pointcloud_server" -->
    <!--       args="load jsk_pcl/PointcloudDatabaseServer /$(arg MANAGER)"> -->
    <node pkg="nodelet" type="nodelet" name="pointcloud_server_org"
          args="standalone pcl/PCDReader">
      <rosparam subst_value="true">
        publish_rate: 1
        tf_frame: "map"
        filename: "$(find drc_task_common)/pcds/drill.pcd"
#        filename: "$(env HOME)/template.pcd"
      </rosparam>
    </node>
    <node pkg="nodelet" type="nodelet" name="pointcloud_server"
          args="standalone pcl/VoxelGrid">
      <remap from="~input" to="pointcloud_server_org/output"/>
      <rosparam subst_value="true">
        leaf_size: 0.01
      </rosparam>
    </node>
    <!-- apply normal estimation to output of db -->
    <node pkg="nodelet" type="nodelet" name="template_normal_estimation"
	  args="standalone pcl/NormalEstimation">
      <remap from="~input" to="pointcloud_server/output" />
      <rosparam>
        k_search: 0
        radius_search: 0.1
        spatial_locator: 1
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="normal_concatenater" name="template_normal_concat">
      <remap from="~input" to="pointcloud_server/output" />
      <remap from="~normal" to="template_normal_estimation/output" />
      <rosparam>
        use_async: true
      </rosparam>
    </node>
    <node pkg="jsk_topic_tools" type="static_transform_pose_stamped" name="static_transform_pose_stamped"
          args="0 0 -0.12 0 0 0.785 /$(arg DRILL_RECOGNITION_NAMESPACE)/icp_registration/output_pose /$(arg DRILL_RECOGNITION_NAMESPACE)/icp_registration/output_pose_origin"
          />
    <node pkg="jsk_topic_tools" type="snapshot" name="snapshot">
      <remap from="~input" to="icp_registration/output_pose_origin"/>
      <rosparam>
        latch: true
      </rosparam>
    </node>
    <group if="$(arg SAVE_CLOUD)">
      <node pkg="nodelet" type="nodelet" name="template_normal_estimation_for_save"
            args="standalone pcl/NormalEstimation">
        <remap from="~input" to="filtered_cloud/output" />
        <rosparam>
        k_search: 0
        radius_search: 0.1
        spatial_locator: 1
        </rosparam>
      </node>
      <node pkg="jsk_pcl_ros" type="normal_concatenater" name="template_normal_concat_for_save">
        <remap from="~input" to="filtered_cloud/output" />
        <remap from="~normal" to="template_normal_estimation_for_save/output" />
        <rosparam>
        use_async: true
        </rosparam>
      </node>
      <node pkg="nodelet" type="nodelet" name="pointcloud_transform_in_box"
            args="load jsk_pcl/TransformPointcloudInBoundingBox /$(arg MANAGER)">
        <remap from="~input" to="template_normal_concat_for_save/output" />
        <remap from="~input_box" to="bounding_box" />
      </node>
      <node pkg="jsk_topic_tools" type="snapshot" name="snapshot_cloud_for_save">
        <remap from="~input" to="pointcloud_transform_in_box/output"/>
        <rosparam>
        latch: true
        </rosparam>
      </node>
      <node pkg="nodelet" type="nodelet" name="pcd_saver"
            args="load pcl/PCDWriter /$(arg MANAGER)">
        <remap from="~input" to="snapshot_cloud_for_save/output" />
      </node>
    </group>
  </group>
</launch>
