#!/usr/bin/env roseus

(load "package://drc_task_common/euslisp/vehicle/vehicle-executive-utils.l")

(ros::roseus-add-msgs "jsk_recognition_msgs"
(ros::roseus-add-msgs "drc_com_common")
(ros::roseus "vehicle_fc_executive")

(setq *vehicle-fc-executive-enable-flag* nil)

(setq *latest-goal-handle-angle* nil)
(setq *latest-estimated-handle-angle* nil)
(setq *latest-step* nil)
(setq *latest-min-step* nil)
(setq *latest-max-step* nil)
(setq *latest-neck-y-angle* nil)
(setq *latest-neck-p-angle* nil)
(setq *latest-handle-mode* nil)
(setq *latest-accel-mode* nil)
(setq *latest-neck-mode* nil)
(setq *latest-real* nil)
(setq *latest-obstacle-length* nil)
(setq *initialize-service-client* (instance empty-service-client :init "/drive/controller/initialize"))
(setq *grasp-service-client* (instance empty-service-client :init "/drive/controller/grasp"))
(setq *release-service-client* (instance empty-service-client :init "/drive/controller/release"))
(setq *correct-service-client* (instance empty-service-client :init "/drive/controller/correct"))
(setq *resume-service-client* (instance empty-service-client :init "/drive/controller/resume"))
(setq *approach-handle-service-client* (instance empty-service-client :init "/drive/controller/approach_handle"))
(setq *approach-accel-service-client* (instance empty-service-client :init "/drive/controller/approach_accel"))
(setq *reach-arm-service-client* (instance empty-service-client :init "/drive/controller/reach_arm"))
(setq *reach-leg-service-client* (instance empty-service-client :init "/drive/controller/reach_leg"))
(setq *egress-service-client* (instance empty-service-client :init "/drive/controller/egress"))
(setq *set-max-step-service-client* (instance set-value-service-client :init "/drive/controller/set_max_step"))
(setq *set-min-step-service-client* (instance set-value-service-client :init "/drive/controller/set_min_step"))
(setq *overwrite-handle-angle-service-client* (instance set-value-service-client :init "/drive/controller/overwrite_handle_angle"))
(setq *set-handle-mode-service-client* (instance set-controller-mode-service-client :init "/drive/controller/set_handle_mode"))
(setq *set-accel-mode-service-client* (instance set-controller-mode-service-client :init "/drive/controller/set_accel_mode"))
(setq *set-neck-mode-service-client* (instance set-controller-mode-service-client :init "/drive/controller/set_neck_mode"))
(setq *set-real-service-client* (instance set-uint8-service-client :init "/drive/controller/set_real"))

(defun ocs-message-callback (msg)
  (let (tmp-msg)
    (setq *vehicle-fc-executive-enable-flag* (send msg :execute_flag))
    (setq tmp-msg (make-msg-from-tunnel msg :handle_cmd std_msgs::Float64))
    (ros::publish "/drive/operation/handle_cmd" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :accel_cmd std_msgs::Float64))
    (ros::publish "/drive/operation/accel_cmd" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :brake_cmd std_msgs::Float64))
    (ros::publish "/drive/operation/brake_cmd" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :neck_y_cmd std_msgs::Float64))
    (ros::publish "/drive/operation/neck_y_cmd" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :neck_p_cmd std_msgs::Float64))
    (ros::publish "/drive/operation/neck_p_cmd" tmp-msg)
    (send *initialize-service-client* :call (send msg :initialize_request))
    (send *grasp-service-client* :call (send msg :grasp_request))
    (send *release-service-client* :call (send msg :release_request))
    (send *correct-service-client* :call (send msg :correct_request))
    (send *approach-handle-service-client* :call (send msg :approach_handle_request))
    (send *approach-accel-service-client* :call (send msg :approach_accel_request))
    (send *reach-arm-service-client* :call (send msg :reach_arm_request))
    (send *reach-leg-service-client* :call (send msg :reach_leg_request))
    (send *egress-service-client* :call (send msg :egress_request))
    (send *set-max-step-service-client* :call (send msg :set_max_step_request) (send msg :set_max_step_request_value))
    (send *set-min-step-service-client* :call (send msg :set_min_step_request) (send msg :set_min_step_request_value))
    (send *overwrite-handle-angle-service-client* :call (send msg :overwrite_handle_angle_request) (send msg :overwrite_handle_angle_request_value))
    (send *set-handle-mode-service-client* :call (send msg :set_handle_mode_request) (send msg :set_handle_mode_request_value))
    (send *set-accel-mode-service-client* :call (send msg :set_accel_mode_request) (send msg :set_accel_mode_request_value))
    (send *set-neck-mode-service-client* :call (send msg :set_neck_mode_request) (send msg :set_neck_mode_request_value))
    (send *set-real-service-client* :call (send msg :set_real_request) (send msg :set_real_request_value))
    )
  )

(defun goal-handle-angle-callback (msg)
  (setq *latest-goal-handle-angle* (send msg :data))
  )
(defun estimated-handle-angle-callback (msg)
  (setq *latest-estimated-handle-angle* (send msg :data))
  )
(defun step-callback (msg)
  (setq *latest-step* (send msg :data))
  )
(defun min-step-callback (msg)
  (setq *latest-min-step* (send msg :data))
  )
(defun max-step-callback (msg)
  (setq *latest-max-step* (send msg :data))
  )
(defun neck-y-angle-callback (msg)
  (setq *latest-neck-y-angle* (send msg :data))
  )
(defun neck-p-angle-callback (msg)
  (setq *latest-neck-p-angle* (send msg :data))
  )
(defun handle-mode-callback (msg)
  (print (send msg :data))
  (setq *latest-handle-mode* (convert-mode-to-uint8 (send msg :data)))
  )
(defun accel-mode-callback (msg)
  (setq *latest-accel-mode* (convert-mode-to-uint8 (send msg :data)))
  )
(defun neck-mode-callback (msg)
  (setq *latest-neck-mode* (convert-mode-to-uint8 (send msg :data)))
  )
(defun real-callback (msg)
  (setq *latest-real* (send msg :data))
  )
(defun obstacle-length-callback (msg)
  (setq *latest-obstacle-length* (send msg :data))
  )

(defun main-spin-once ()
  (let ((msg (instance drc_com_common::VehicleFC2OCSSmall :init)))
    (when *latest-goal-handle-angle*
      (send msg :goal_handle_angle *latest-goal-handle-angle*)
      )
    (when *latest-estimated-handle-angle*
      (send msg :estimated_handle_angle *latest-estimated-handle-angle*)
      )
    (when *latest-step*
      (send msg :step *latest-step*)
      )
    (when *latest-min-step*
      (send msg :min_step *latest-min-step*)
      )
    (when *latest-max-step*
      (send msg :max_step *latest-max-step*)
      )
    (when *latest-neck-y-angle*
      (send msg :neck_y_angle *latest-neck-y-angle*)
      )
    (when *latest-neck-p-angle*
      (send msg :neck_p_angle *latest-neck-p-angle*)
      )
    (when *latest-handle-mode*
      (send msg :handle_mode *latest-handle-mode*)
      )
    (when *latest-accel-mode*
      (send msg :accel_mode *latest-accel-mode*)
      )
    (when *latest-neck-mode*
      (send msg :neck_mode *latest-neck-mode*)
      )
    (when *latest-real*
      (send msg :real *latest-real*)
      )
    (when *latest-obstacle-length*
      (send msg :obstacle_length *latest-obstacle-length*)
      )
    (send msg :initialize_response (send *initialize-service-client* :response))
    (send msg :grasp_response (send *grasp-service-client* :response))
    (send msg :release_response (send *release-service-client* :response))
    (send msg :correct_response (send *correct-service-client* :response))
    (send msg :resume_response (send *resume-service-client* :response))
    (send msg :approach_handle_response (send *approach-handle-service-client* :response))
    (send msg :approach_accel_response (send *approach-accel-service-client* :response))
    (send msg :reach_arm_response (send *reach-arm-service-client* :response))
    (send msg :reach_leg_response (send *reach-leg-service-client* :response))
    (send msg :egress_response (send *egress-service-client* :response))
    (send msg :set_max_step_response (send *set-max-step-service-client* :response))
    (send msg :set_min_step_response (send *set-min-step-service-client* :response))
    (send msg :overwrite_handle_angle_response (send *overwrite-handle-angle-service-client* :response))
    (send msg :set_handle_mode_response (send *set-handle-mode-service-client* :response))
    (send msg :set_accel_mode_response (send *set-accel-mode-service-client* :response))
    (send msg :set_neck_mode_response (send *set-neck-mode-service-client* :response))
    (send msg :set_real_response (send *set-real-service-client* :response))

    (when *vehicle-fc-executive-enable-flag*
        (ros::publish "/fc_to_ocs_vehicle/input" msg)
      )
    )
  )

;; for ueda tunnel
(ros::advertise "/fc_to_ocs_vehicle/input" drc_com_common::VehicleFC2OCSSmall)
(ros::subscribe "/fc_from_ocs_vehicle/output" drc_com_common::VehicleOCS2FCSmall #'ocs-message-callback)

;; message to driving-controller
(ros::advertise "/drive/operation/handle_cmd" std_msgs::Float64 1)
(ros::advertise "/drive/operation/accel_cmd" std_msgs::Float64 1)
(ros::advertise "/drive/operation/brake_cmd" std_msgs::Float64 1)
(ros::advertise "/drive/operation/neck_y_cmd" std_msgs::Float64 1)
(ros::advertise "/drive/operation/neck_p_cmd" std_msgs::Float64 1)

;; message from driving-controller
(ros::subscribe "/drive/controller/goal_handle_angle" std_msgs::Float32 #'goal-handle-angle-callback)
(ros::subscribe "/drive/controller/estimated_handle_angle" std_msgs::Float32 #'estimated-handle-angle-callback)
(ros::subscribe "/drive/controller/step" std_msgs::Float32 #'step-callback)
(ros::subscribe "/drive/controller/min_step" std_msgs::Float32 #'min-step-callback)
(ros::subscribe "/drive/controller/max_step" std_msgs::Float32 #'max-step-callback)
(ros::subscribe "/drive/controller/neck_y_angle" std_msgs::Float32 #'neck-y-angle-callback)
(ros::subscribe "/drive/controller/neck_p_angle" std_msgs::Float32 #'neck-p-angle-callback)
(ros::subscribe "/drive/controller/real" std_msgs::Bool #'real-callback)

(ros::subscribe "/drive/controller/handle_mode" std_msgs::String #'handle-mode-callback)
(ros::subscribe "/drive/controller/accel_mode" std_msgs::String #'accel-mode-callback)
(ros::subscribe "/drive/controller/neck_mode" std_msgs::String #'neck-mode-callback)

(ros::subscribe "/drive/recognition/obstacle_length/indicator" std_msgs::Float32 #'obstacle-length-callback)

(ros::rate 5)
(while (ros::ok)
  (ros::spin-once)
  (main-spin-once)
  (ros::sleep))

