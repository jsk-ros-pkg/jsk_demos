(load "door-open.l")
(load "dump-convex-hull.l")
(load "math.l")

;; (setq *door-angle-list* (list -0 -5 -10 -20 -30 -40 -50 -60))
;;(setq *door-force-list* (list 9.0 44 29 19 15 15 13 14))

;;論文に用いたparameter
;; 開き戸
;; (setq *door-angle-list* (list -0 -10 -20 -30 -40 -50 -60 -70))
;; (setq *door-force-list* (make-list 8 :initial-element 80))

;; 押し扉*robot-pos* (-500 -750 0)
(setq *door-angle-list* (list 0 100 200 300 400 500))
(setq *door-force-list* (make-list 6 :initial-element 80))
;;(setq *door-force-list* (make-list 6 :initial-element 0))

;;引き戸
(defun slide-door (y)
  (send (elt (send *door* :links) 1) :newcoords 
        (send (send (send (elt (send *door* :links) 1) :worldcoords) :copy-worldcoords) 
              :translate (float-vector 0 y 0))))

(defun slide-robot (y)
  (send *robot* :fix-leg-to-coords (send (send *robot* :foot-midcoords) 
                                         :translate (float-vector 0 y 0)))
  )

(defun reach-slide-door (door-angle)
  (send *robot* :fix-leg-to-coords (make-coords :pos (float-vector -500 (-(+ 800 door-angle)) 0)))
  (send (send *door* :joint :door-knob-joint) :joint-angle 90)
  (door-reach :knob-angle -90)
  (slide-robot door-angle)
  ;; (send *robot* :larm :move-end-pos (float-vector 0 door-angle 0))
  (slide-door door-angle)
  (setq *robot-pos* (send (send *robot* :foot-midcoords) :worldpos))
  (send *irtviewer* :draw-objects)
  )



(defun get-zmp-hull (&key (rleg-translate #f(0 0 0)) (lleg-translate #f(0 0 0)))
  (let ();;(zmp-diff-vertics zmp0 zmp1 zmp-diff);;(zmp-diff-vertics)
    (setq *zmps* nil)
    (setq *zmp-hull* nil)
    (setq zmp-diff-vertics
          (mapcar #'(lambda (door-angle door-force)
                      (let ()
                        (dotimes (i 3) (send *robot* :calc-zmp))
                        (reach-slide-door door-angle)
                        ;;(reset-manip-pose-only-rarm)
                        (setq zmp0 (send *robot* :centroid))
                        (setf (elt zmp0 2) 0)
                        (setq zmp1
                              (send *robot* :calc-static-balance-point
                                    :force-list (list #f(0 0 0) 
                                                      (float-vector 0 door-force 0)
                                                      )))
                        (push zmp1 *zmps*)
                        (setq zmp-diff (v- zmp1 zmp0))
                        ))
                  *door-angle-list* *door-force-list*))
    (setq zmp-diff-vertics (cons (floatvector 0 0 (elt zmp1 2)) zmp-diff-vertics))
    ;; (setq *zmp-hull*  (make-prism (quickhull zmp-diff-vertics) -10))
    ;; (send *zmp-hull* :newcoords (make-coords :pos (send (send *robot* :foot-midcoords) :worldpos)))
    ;; (send *zmp-hull* :set-color #f(0 0 1))
    ;; (objects *zmp-hull*)
    ;; *zmp-hull*
    ))

(defun get-stability-margin-during-opening-door ()
  (setq sm-list (mapcar #'(lambda (x) 
                            (setq tmp (stability-margin :zmp x))
                            (if tmp tmp 0))
                        *zmps*))
  (apply #'min sm-list)
  )

(defun change-feet-alignment()
  (let (dr dtheta dx dy rleg-to-lleg)
    (setq r-range #f(100 200))
    (setq theta-range #f(-180 0))
    (setq r-step 50.0)
    (setq theta-step 45)
    (setq *init-centroid* (send (send (send *robot* :foot-midcoords) :copy-worldcoords) :pos))
    (setq *dr-list* nil)
    (setq *dtheta-list* nil)
    (setq *feet-alignment-list* nil)
    
    (send *robot* :fix-leg-to-coords (make-coords :pos *robot-pos*))
    (dotimes (ir (1+ (round (/ (- (elt r-range 1) (elt r-range 0)) r-step))))
      (dotimes (itheta (1+ (round (/ (- (elt theta-range 1) (elt theta-range 0)) theta-step))))
        (setq dr (+ (elt r-range 0) (* r-step ir)))
        (setq dtheta (+ (elt theta-range 0) (* theta-step itheta)))
        (setq dx (* dr (cos (deg2rad dtheta))))
        (setq dy (* dr (sin (deg2rad dtheta))))
        (setq rleg-to-lleg (float-vector dx dy 0))
        (push rleg-to-lleg *feet-alignment-list*)
        (push dr *dr-list*)
        (push dtheta *dtheta-list*)
        ()
        )
      )
    (setq *feet-alignment-list* (reverse *feet-alignment-list*))
    (setq *dr-list* (reverse *dr-list*))
    (setq *dtheta-list* (reverse *dtheta-list*))
    ))
(defun evaluate-feet-alignment (rleg-to-lleg)
  (send *robot* :reset-pose)
  (send *robot* :fix-leg-to-coords (make-coords :pos *robot-pos*))
  (send *robot* :rleg :move-end-pos (mapvector #'(lambda (x) (/ x 2)) rleg-to-lleg))
  (send *robot* :lleg :move-end-pos (mapvector #'(lambda (x) (/ x -2)) rleg-to-lleg))
  (get-zmp-hull)
  (setq ret (get-stability-margin-during-opening-door))
  (dump-convex-hull)
  ;; (send *foot-convex* :newcoords (send (send *foot-convex* :worldcoords) :translate #f(0 0 5)))
  ;; (objects (list *robot* *door* *foot-convex* *zmp-hull*))
  ret
  )

(defun search-feet-alignments ()
  (setq *best-st-margin* 0)
  (setq *best-feet-alignment* nil)
  (setq *st-margin-list* nil)
  (change-feet-alignment);;get list of rleg-to-lleg vector
  (dolist (rleg-to-lleg *feet-alignment-list*)
    (setq st-margin (evaluate-feet-alignment rleg-to-lleg))
    (push st-margin *st-margin-list*)
    (when (>  st-margin *best-st-margin*)
      (setq *best-feet-alignment* rleg-to-lleg)
      (setq *best-st-margin* st-margin))
    )
  (setq *st-margin-list* (reverse *st-margin-list*))
  )