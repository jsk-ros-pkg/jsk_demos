(load "package://drc_task_common/euslisp/irex-large-box/apc-box-model.l")
(load "package://drc_task_common/euslisp/irex-large-box/sift-box.l") ;; also generate *apc-box*

(defun make-jaxon-ri ()
  (load "package://hrpsys_ros_bridge_tutorials/euslisp/jaxon_red-interface.l")
  (jaxon_red-init)
  (setq *robot* *jaxon_red*)
  )

(defun start-auto-balancer-no-fix ()
  (send *ri* :start-auto-balancer :limbs '(:rleg :lleg :rarm :larm))
  (send *ri* :set-auto-balancer-param :is-hand-fix-mode nil)
  )

(defun jaxon-apc-box-init (&key (box-pos (float-vector 850 0 0)))
  ;; (make-apc-box)
  (send *robot* :reset-manip-pose)
  (send *robot* :fix-leg-to-coords (make-coords))
  (send *apc-box* :newcoords (make-coords :pos box-pos))
  (objects (list *robot* *apc-box*))
  (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) 5000) ?~%")
  (when (y-or-n-p)
    (send *ri* :angle-vector (send *robot* :angle-vector) 5000)
    (send *ri* :wait-interpolation)
    )
  ;; (warn ";; (send *ri* :start-auto-balancer) ?~%")
  ;; (when (y-or-n-p)
  ;;   ;;(send *ri* :start-auto-balancer)
  ;;   ;;(send *ri* :stop-auto-balancer)
  ;;   (send *ri* :start-auto-balancer :limbs '(:rleg :lleg :rarm :larm))
  ;;   )
  ;; (warn ";; (send *ri* :start-st) ?~%")
  ;; (when (y-or-n-p)
  ;;   (send *ri* :start-st)
  ;;   )
  (warn ";; (send *ri* :start-impedance :arms) ?~%")
  (when (y-or-n-p)
    (send *ri* :start-impedance :arms)
    ;;(send *ri* :start-impedance :arms :k-p 3000 :d-p 600)
    )
  )

(defun walking-pose
  (robot
   &key (root-link-height-offset 0)
   (root-link-pitch-offset 0)
   (head-link-pitch-offset 0)
   (root-link-roll-offset 0)
   (chest-link-pitch-offset 0)
   (chest-link-roll-offset 0)
   (fix-coords (make-coords))
   (default-pose-method :reset-manip-pose))
  "Generate and set walking pose.
   default-pose-method is initial pose, reset-manip-pose by default.
   Generated pose is near from default-pose-method pose.
   root-link-height-offset is root height offset [mm] from default-pose-method.
   root-link-pitch-offset and root-link-roll-offset are root pitch and roll offset [deg] from default-pose-method."
  (send robot default-pose-method)
  (send robot :fix-leg-to-coords fix-coords)
  (let ((lc (mapcar #'(lambda (l)
                        (send robot l :end-coords :copy-worldcoords))
                    '(:rleg :lleg))))
    (send robot :move-coords
          (send
           (send
            (send (send (car (send robot :links)) :copy-worldcoords)
                  :translate (float-vector 0 0 root-link-height-offset))
            :rotate (deg2rad root-link-pitch-offset) :y)
           :rotate (deg2rad root-link-roll-offset) :x)
          (car (send robot :links)))
    (if (find-method robot :torso-waist-p) (send robot :torso-waist-p :joint-angle chest-link-pitch-offset))
    (if (find-method robot :torso-waist-r) (send robot :torso-waist-r :joint-angle chest-link-roll-offset))
    (mapcar #'(lambda (l c)
                (send robot l :inverse-kinematics c))
            '(:rleg :lleg) lc)
    (send robot :move-centroid-on-foot :both '(:rleg :lleg))
    (if (find-method robot :head-neck-p) (send robot :head-neck-p :joint-angle head-link-pitch-offset))
    (send robot :angle-vector)
    ))

(defun jaxon-apc-box-reach-side (&key (mid1-reach-pos-r (float-vector -120 -50 -40)) (mid1-reach-pos-l (float-vector -120 50 -40))
                                      (mid2-reach-pos-r (float-vector 10 -50 -40)) (mid2-reach-pos-l (float-vector 10 50 -40))
                                      (grasp-reach-pos-r (float-vector 0 10 -40)) (grasp-reach-pos-l (float-vector 0 -10 -40))
                                      (hand-rotation 45) (box-pos (float-vector 850 0 0))
                                      (dt-list '(8000 5000 5000)) (rlpo 25) (hlpo 30) (arms-force-offset-mode t) (back-mode t))
  (send *apc-box* :newcoords (make-coords :pos box-pos))
  (let* (avs)
    (send *robot* :reset-manip-pose)
    (push (send *robot* :angle-vector) avs)
    ;; move to pose-1
    (walking-pose *robot* :root-link-pitch-offset rlpo :head-link-pitch-offset hlpo)
    ;; (send *robot* :rarm-thumb-r :joint-angle 90.0)
    ;; (send *robot* :larm-thumb-r :joint-angle -90.0)
    (send *robot*
          :fullbody-inverse-kinematics
          (list
           ;;(send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate mid-reach-pos :world) :rotate (deg2rad 90) :z)
           ;;(send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate mid-reach-pos :world) :rotate (deg2rad -90) :z)
           (send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate mid1-reach-pos-r :world) :rotate (deg2rad hand-rotation) :z)
           (send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate mid1-reach-pos-l :world) :rotate (deg2rad (- hand-rotation)) :z)
           (send *robot* :rleg :end-coords :copy-worldcoords)
           (send *robot* :lleg :end-coords :copy-worldcoords))
          :move-target
          (list
           (send *robot* :rarm :end-coords)
           (send *robot* :larm :end-coords)
           (send *robot* :rleg :end-coords)
           (send *robot* :lleg :end-coords))
          :link-list
          (mapcar #'(lambda (limb)
                      (send *robot* :link-list (send limb :parent)))
                  (list
                   (send *robot* :rarm :end-coords)
                   (send *robot* :larm :end-coords)
                   (send *robot* :rleg :end-coords)
                   (send *robot* :lleg :end-coords))
                  )
          :additional-weight-list
          (list (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :knee-p :child-link) 0.5)
                (list (send *robot* :lleg :knee-p :child-link) 0.5))
          :translation-axis (list t t t t)
          :rotation-axis (list t t t t)
          :target-centroid-pos (send (send *robot* :foot-midcoords) :worldpos)
          :debug-view :no-message)
    (send *irtviewer* :draw-objects)
    (push (send *robot* :angle-vector) avs)
    ;; (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) ~a) ?~%" (+ dt 4000))
    (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) ~a) ?~%" (elt dt-list 0))
    (when (y-or-n-p)
      ;; (send *ri* :angle-vector (send *robot* :angle-vector) (+ dt 4000))
      (send *ri* :angle-vector (send *robot* :angle-vector) (elt dt-list 0))
      (send *ri* :wait-interpolation)
      )

    (warn ";; move to pose-2 ?~%")
    (unless (y-or-n-p)
      (return-from jaxon-apc-box-reach-side)
      )

    ;; move to pose-2
    (walking-pose *robot* :root-link-pitch-offset rlpo :head-link-pitch-offset hlpo)
    ;; (send *robot* :rarm-thumb-r :joint-angle 90.0)
    ;; (send *robot* :larm-thumb-r :joint-angle -90.0)
    (send *robot*
          :fullbody-inverse-kinematics
          (list
           (send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate mid2-reach-pos-r :world) :rotate (deg2rad hand-rotation) :z)
           (send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate mid2-reach-pos-l :world) :rotate (deg2rad (- hand-rotation)) :z)
           (send *robot* :rleg :end-coords :copy-worldcoords)
           (send *robot* :lleg :end-coords :copy-worldcoords))
          :move-target
          (list
           (send *robot* :rarm :end-coords)
           (send *robot* :larm :end-coords)
           (send *robot* :rleg :end-coords)
           (send *robot* :lleg :end-coords))
          :link-list
          (mapcar #'(lambda (limb)
                      (send *robot* :link-list (send limb :parent)))
                  (list
                   (send *robot* :rarm :end-coords)
                   (send *robot* :larm :end-coords)
                   (send *robot* :rleg :end-coords)
                   (send *robot* :lleg :end-coords))
                  )
          :additional-weight-list
          (list (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :knee-p :child-link) 0.5)
                (list (send *robot* :lleg :knee-p :child-link) 0.5))
          :translation-axis (list t t t t)
          :rotation-axis (list t t t t)
          :target-centroid-pos (send (send *robot* :foot-midcoords) :worldpos)
          :debug-view :no-message)
    (send *irtviewer* :draw-objects)
    (push (send *robot* :angle-vector) avs)
    (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) ~a) ?~%" (elt dt-list 1))
    (when (y-or-n-p)
      (send *ri* :angle-vector (send *robot* :angle-vector) (elt dt-list 1))
      (send *ri* :wait-interpolation)
      )

    (warn ";; move to pose-reach-end ?~%")
    (unless (y-or-n-p)
      (return-from jaxon-apc-box-reach-side)
      )

    ;; move to pose-reach-end
    (walking-pose *robot* :root-link-pitch-offset rlpo :head-link-pitch-offset hlpo)
    ;; (send *robot* :rarm-thumb-r :joint-angle 90.0)
    ;; (send *robot* :larm-thumb-r :joint-angle -90.0)
    (send *robot*
          :fullbody-inverse-kinematics
          (list
           ;;(send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate mid-reach-pos :world) :rotate (deg2rad 90) :z)
           ;;(send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate mid-reach-pos :world) :rotate (deg2rad -90) :z)
           (send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate grasp-reach-pos-r :world) :rotate (deg2rad hand-rotation) :z)
           (send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate grasp-reach-pos-l :world) :rotate (deg2rad (- hand-rotation)) :z)
           (send *robot* :rleg :end-coords :copy-worldcoords)
           (send *robot* :lleg :end-coords :copy-worldcoords))
          :move-target
          (list
           (send *robot* :rarm :end-coords)
           (send *robot* :larm :end-coords)
           (send *robot* :rleg :end-coords)
           (send *robot* :lleg :end-coords))
          :link-list
          (mapcar #'(lambda (limb)
                      (send *robot* :link-list (send limb :parent)))
                  (list
                   (send *robot* :rarm :end-coords)
                   (send *robot* :larm :end-coords)
                   (send *robot* :rleg :end-coords)
                   (send *robot* :lleg :end-coords))
                  )
          :additional-weight-list
          (list (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :knee-p :child-link) 0.5)
                (list (send *robot* :lleg :knee-p :child-link) 0.5))
          :translation-axis (list t t t t)
          :rotation-axis (list t t t t)
          :target-centroid-pos (send (send *robot* :foot-midcoords) :worldpos)
          :debug-view :no-message)
    (send *irtviewer* :draw-objects)
    (push (send *robot* :angle-vector) avs)
    (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) ~a) ?~%" (elt dt-list 2))
    (when (y-or-n-p)
      (send *ri* :angle-vector (send *robot* :angle-vector) (elt dt-list 2))
      (send *ri* :wait-interpolation)
      )

    (when arms-force-offset-mode
      (warn ";; (send *ri* :reset-force-moment-offset-arms) ? # arms should not be touched with box~%")
      (if (y-or-n-p)
          (send *ri* :reset-force-moment-offset-arms))
      )

    (when back-mode
      (let* ((r-dt-list (reverse dt-list)))
        (warn ";; Back Mode !!!~%")
        (pop avs)
        (dolist (av avs)
          (warn ";; move to next ?~%")
          (unless (y-or-n-p)
            (return-from jaxon-apc-box-reach-side)
            )
          (send *robot* :angle-vector av)
          (send *robot* :fix-leg-to-coords (make-coords))
          (send *irtviewer* :draw-objects)
          (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) ~a) ?~%" (car r-dt-list))
          (when (y-or-n-p)
            (send *ri* :angle-vector (send *robot* :angle-vector) (car r-dt-list))
            (send *ri* :wait-interpolation)
            )
          (pop r-dt-list)
          )
        )
      )
    ))

(defun jaxon-apc-box-reach-side-back-only (&key (mid1-reach-pos-r (float-vector -120 -50 -40)) (mid1-reach-pos-l (float-vector -120 50 -40))
                                                (mid2-reach-pos-r (float-vector 10 -50 -40)) (mid2-reach-pos-l (float-vector 10 50 -40))
                                                (grasp-reach-pos-r (float-vector 0 10 -40)) (grasp-reach-pos-l (float-vector 0 -10 -40))
                                                (hand-rotation 45) (box-pos (float-vector 850 0 0))
                                                (dt-list '(8000 5000 5000)) (rlpo 25) (hlpo 30))
  (send *apc-box* :newcoords (make-coords :pos box-pos))
  (let* (avs)
    (send *robot* :reset-manip-pose)
    (push (send *robot* :angle-vector) avs)
    ;; move to pose-1
    (walking-pose *robot* :root-link-pitch-offset rlpo :head-link-pitch-offset hlpo)
    ;; (send *robot* :rarm-thumb-r :joint-angle 90.0)
    ;; (send *robot* :larm-thumb-r :joint-angle -90.0)
    (send *robot*
          :fullbody-inverse-kinematics
          (list
           ;;(send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate mid-reach-pos :world) :rotate (deg2rad 90) :z)
           ;;(send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate mid-reach-pos :world) :rotate (deg2rad -90) :z)
           (send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate mid1-reach-pos-r :world) :rotate (deg2rad hand-rotation) :z)
           (send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate mid1-reach-pos-l :world) :rotate (deg2rad (- hand-rotation)) :z)
           (send *robot* :rleg :end-coords :copy-worldcoords)
           (send *robot* :lleg :end-coords :copy-worldcoords))
          :move-target
          (list
           (send *robot* :rarm :end-coords)
           (send *robot* :larm :end-coords)
           (send *robot* :rleg :end-coords)
           (send *robot* :lleg :end-coords))
          :link-list
          (mapcar #'(lambda (limb)
                      (send *robot* :link-list (send limb :parent)))
                  (list
                   (send *robot* :rarm :end-coords)
                   (send *robot* :larm :end-coords)
                   (send *robot* :rleg :end-coords)
                   (send *robot* :lleg :end-coords))
                  )
          :additional-weight-list
          (list (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :knee-p :child-link) 0.5)
                (list (send *robot* :lleg :knee-p :child-link) 0.5))
          :translation-axis (list t t t t)
          :rotation-axis (list t t t t)
          :target-centroid-pos (send (send *robot* :foot-midcoords) :worldpos)
          :debug-view :no-message)
    ;; (send *irtviewer* :draw-objects)
    (push (send *robot* :angle-vector) avs)
    ;; (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) ~a) ?~%" (+ dt 4000))
    ;; (when (y-or-n-p)
    ;;   (send *ri* :angle-vector (send *robot* :angle-vector) (+ dt 4000))
    ;;   (send *ri* :wait-interpolation)
    ;;   )

    ;; (warn ";; move to pose-2 ?~%")
    ;; (unless (y-or-n-p)
    ;;   (return-from jaxon-apc-box-reach-side-back-only)
    ;;   )

    ;; move to pose-2
    (walking-pose *robot* :root-link-pitch-offset rlpo :head-link-pitch-offset hlpo)
    ;; (send *robot* :rarm-thumb-r :joint-angle 90.0)
    ;; (send *robot* :larm-thumb-r :joint-angle -90.0)
    (send *robot*
          :fullbody-inverse-kinematics
          (list
           (send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate mid2-reach-pos-r :world) :rotate (deg2rad hand-rotation) :z)
           (send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate mid2-reach-pos-l :world) :rotate (deg2rad (- hand-rotation)) :z)
           (send *robot* :rleg :end-coords :copy-worldcoords)
           (send *robot* :lleg :end-coords :copy-worldcoords))
          :move-target
          (list
           (send *robot* :rarm :end-coords)
           (send *robot* :larm :end-coords)
           (send *robot* :rleg :end-coords)
           (send *robot* :lleg :end-coords))
          :link-list
          (mapcar #'(lambda (limb)
                      (send *robot* :link-list (send limb :parent)))
                  (list
                   (send *robot* :rarm :end-coords)
                   (send *robot* :larm :end-coords)
                   (send *robot* :rleg :end-coords)
                   (send *robot* :lleg :end-coords))
                  )
          :additional-weight-list
          (list (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :knee-p :child-link) 0.5)
                (list (send *robot* :lleg :knee-p :child-link) 0.5))
          :translation-axis (list t t t t)
          :rotation-axis (list t t t t)
          :target-centroid-pos (send (send *robot* :foot-midcoords) :worldpos)
          :debug-view :no-message)
    ;; (send *irtviewer* :draw-objects)
    (push (send *robot* :angle-vector) avs)
    ;; (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) ~a) ?~%" dt)
    ;; (when (y-or-n-p)
    ;;   (send *ri* :angle-vector (send *robot* :angle-vector) dt)
    ;;   (send *ri* :wait-interpolation)
    ;;   )

    ;; (warn ";; move to pose-reach-end ?~%")
    ;; (unless (y-or-n-p)
    ;;   (return-from jaxon-apc-box-reach-side-back-only)
    ;;   )

    ;; move to pose-reach-end
    (walking-pose *robot* :root-link-pitch-offset rlpo :head-link-pitch-offset hlpo)
    ;; (send *robot* :rarm-thumb-r :joint-angle 90.0)
    ;; (send *robot* :larm-thumb-r :joint-angle -90.0)
    (send *robot*
          :fullbody-inverse-kinematics
          (list
           ;;(send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate mid-reach-pos :world) :rotate (deg2rad 90) :z)
           ;;(send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate mid-reach-pos :world) :rotate (deg2rad -90) :z)
           (send (send (send (send *apc-box* :side-front-right-grasp-edge) :copy-worldcoords) :translate grasp-reach-pos-r :world) :rotate (deg2rad hand-rotation) :z)
           (send (send (send (send *apc-box* :side-front-left-grasp-edge) :copy-worldcoords) :translate grasp-reach-pos-l :world) :rotate (deg2rad (- hand-rotation)) :z)
           (send *robot* :rleg :end-coords :copy-worldcoords)
           (send *robot* :lleg :end-coords :copy-worldcoords))
          :move-target
          (list
           (send *robot* :rarm :end-coords)
           (send *robot* :larm :end-coords)
           (send *robot* :rleg :end-coords)
           (send *robot* :lleg :end-coords))
          :link-list
          (mapcar #'(lambda (limb)
                      (send *robot* :link-list (send limb :parent)))
                  (list
                   (send *robot* :rarm :end-coords)
                   (send *robot* :larm :end-coords)
                   (send *robot* :rleg :end-coords)
                   (send *robot* :lleg :end-coords))
                  )
          :additional-weight-list
          (list (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :crotch-p :child-link) 0.5)
                (list (send *robot* :rleg :knee-p :child-link) 0.5)
                (list (send *robot* :lleg :knee-p :child-link) 0.5))
          :translation-axis (list t t t t)
          :rotation-axis (list t t t t)
          :target-centroid-pos (send (send *robot* :foot-midcoords) :worldpos)
          :debug-view :no-message)
    ;; (send *irtviewer* :draw-objects)
    (push (send *robot* :angle-vector) avs)
    ;; (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) ~a) ?~%" dt)
    ;; (when (y-or-n-p)
    ;;   (send *ri* :angle-vector (send *robot* :angle-vector) dt)
    ;;   (send *ri* :wait-interpolation)
    ;;   )

    (let* ((r-dt-list (reverse dt-list)))
      (pop avs)
      (dolist (av avs)
        (warn ";; move to next ?~%")
        (unless (y-or-n-p)
          (return-from jaxon-apc-box-reach-side-back-only)
          )
        (send *robot* :angle-vector av)
        (send *robot* :fix-leg-to-coords (make-coords))
        (send *irtviewer* :draw-objects)
        (warn ";; (send *ri* :angle-vector (send *robot* :angle-vector) ~a) ?~%" (car r-dt-list))
        (when (y-or-n-p)
          (send *ri* :angle-vector (send *robot* :angle-vector) (car r-dt-list))
          (send *ri* :wait-interpolation)
          )
        (pop r-dt-list)
        )
      )
    ))

(defun jaxon-push-main-all (&key (push-distance 0.5))
  ;; Reaching motion
  (warn ";; (jaxon-apc-box-reach-side :arms-force-offset-mode nil :back-mode nil) ?~%")
  (if (y-or-n-p)
      (jaxon-apc-box-reach-side :arms-force-offset-mode nil :back-mode nil))
  ;; Change hand-fix-mode to true
  (warn ";; (send *ri* :set-auto-balancer-param :is-hand-fix-mode t) ?~%")
  (if (y-or-n-p)
      (send *ri* :set-auto-balancer-param :is-hand-fix-mode t))
  ;; Set parameters
  (warn ";; (send *ri* :set-object-turnaround-detector-param :wrench-cutoff-freq 5.0 :dwrench-cutoff-freq 5.0) ?~%")
  (if (y-or-n-p)
      (send *ri* :set-object-turnaround-detector-param :wrench-cutoff-freq 5.0 :dwrench-cutoff-freq 5.0))
  ;; Setq ref-force to move
  (warn ";; (setq *box-push-ref-force* (send *ri* :set-object-turnaround-ref-force :max-ref-force 50 :max-time 4000 :axis (float-vector -1 0 0) :set-ref-force-p nil)) ?~%")
  (if (y-or-n-p)
      (setq *box-push-ref-force* (send *ri* :set-object-turnaround-ref-force :max-ref-force 50 :max-time 4000 :axis (float-vector -1 0 0) :set-ref-force-p nil)))
  ;; Pushing go-pos
  (warn ";; (progn (send *ri* :start-log) (send *ri* :set-ref-force (car *box-push-ref-force*) 2000 :arms) (send *ri* :wait-interpolation-seq) (send *ri* :go-pos ~a 0 0) (send *ri* :set-ref-force (float-vector 0 0 0) 2000 :arms) (send *ri* :wait-interpolation-seq) (send *ri* :save-log /tmp/jaxon-push-main-all)) ?~%" push-distance)
  (if (y-or-n-p)
      (progn (send *ri* :start-log) (send *ri* :set-ref-force (car *box-push-ref-force*) 2000 :arms) (send *ri* :wait-interpolation-seq) (send *ri* :go-pos push-distance 0 0) (send *ri* :set-ref-force (float-vector 0 0 0) 2000 :arms) (send *ri* :wait-interpolation-seq) (send *ri* :save-log "/tmp/jaxon-push-main-all")))
  ;; Change hand-fix-mode to nil
  (warn ";; (send *ri* :set-auto-balancer-param :is-hand-fix-mode nil) ?~%")
  (if (y-or-n-p)
      (send *ri* :set-auto-balancer-param :is-hand-fix-mode nil))
  ;; Release motion
  (warn ";; (jaxon-apc-box-reach-side-back-only) ?~%")
  (if (y-or-n-p)
      (jaxon-apc-box-reach-side-back-only))
  )

;;;; Recognition

(defun project-coords-to-ground (coords)
  (let* ((px (elt (send coords :worldpos) 0))
         (py (elt (send coords :worldpos) 1))
         (yaw (elt (elt (send coords :rpy-angle) 0) 0))
         )
    (make-coords :pos (float-vector px py 0) :angle yaw :axis :z)
    ))

(defun start-calib-box-pos (&key (box *apc-box*) (set-box-x-pos 850))
  (let* ((orig-box-coords (project-coords-to-ground (send box :copy-worldcoords)))
         (orig-box-x (elt (send orig-box-coords :worldpos) 0))
         (orig-box-y (elt (send orig-box-coords :worldpos) 1))
         (orig-box-yaw (elt (elt (send orig-box-coords :rpy-angle) 0) 0))
         x-calib-offset y-calib-offset yaw-calib-offset)
    (setq x-calib-offset (- set-box-x-pos orig-box-x))
    (setq y-calib-offset (- 0 orig-box-y))
    (setq yaw-calib-offset (- 0 orig-box-yaw))
    (setq *calib-offset-coords* (make-coords :pos (float-vector x-calib-offset y-calib-offset 0) :angle yaw-calib-offset :axis :z))
    (warn ";; set-box-x-pos = ~a[mm]~%" set-box-x-pos)
    (warn ";; x-calib-offset = ~a[mm]~%" x-calib-offset)
    (warn ";; y-calib-offset = ~a[mm]~%" y-calib-offset)
    (warn ";; yaw-calib-offset = ~a[rad]~%" yaw-calib-offset)
    (warn ";; *calib-offset-coords* = ~a~%" *calib-offset-coords*)
    (send *apc-box* :newcoords (send (send orig-box-coords :copy-worldcoords) :transform *calib-offset-coords*))
    (send *irtviewer* :draw-objects)
    ))

(defun apply-box-pose (&key (calib-offset nil))
  (let* ((coords (get-primitive-marker-pose :name "apc_box" :frame-id "ground"))
         (box-coords (project-coords-to-ground coords))
         )
    (if calib-offset
        (progn
          (unless (boundp '*calib-offset-coords*)
            (start-calib-box-pos)
            )
          (send *apc-box* :newcoords (send box-coords :transform *calib-offset-coords*))
          )
      (send *apc-box* :newcoords box-coords)
      )
    (send *irtviewer* :draw-objects)
    ))

(defun update-box-pose-by-sift (&key (calib-offset nil))
  (set-pose-10) ;; set box pose by sift recog
  (apply-box-pose :calib-offset calib-offset)
  )

(defun loop-update-box-pose (&key (calib-offset nil))
  (let* ((i 0))
    (do-until-key
     (warn "Loop: ~a~%" i)
     (update-box-pose-by-sift :calib-offset calib-offset)
     (unix::usleep 10000) ;; 0.01sec
     (incf i)
     )
    )
  )

(defun jaxon-maai-hosei-by-go-pos (box-instance &key (ref-box-pos (float-vector 850 0 0)) (gp-stop-thre 1.5) (calib-offset t))
  (let* (proj-coords maai-coords gp-x gp-y gp-yaw)
    (setq proj-coords (project-coords-to-ground (send box-instance :copy-worldcoords)))
    (setq maai-coords (send proj-coords :translate (v- ref-box-pos) :local))
    (setq gp-x-m (* 0.001 (elt (send maai-coords :worldpos) 0)))
    (setq gp-y-m (* 0.001 (elt (send maai-coords :worldpos) 1)))
    (setq gp-yaw-deg (rad2deg (elt (elt (send maai-coords :rpy-angle) 0) 0)))
    (if (> (norm (float-vector gp-x-m gp-y-m)) gp-stop-thre)
        (progn
          (warn "Emergency: too far to go-pos !!!~%")
          (return-from jaxon-maai-hosei-by-go-pos)
          ))
    (warn ";; (send *ri* :go-pos ~a ~a ~a) OK?~%" gp-x-m gp-y-m gp-yaw-deg)
    (when (y-or-n-p)
      (send *ri* :go-pos gp-x-m gp-y-m gp-yaw-deg)
      (send *ri* :wait-interpolation)
      (update-box-pose-by-sift :calib-offset calib-offset)
      )
    ))

(defun jaxon-apc-box-okkake ()
  (update-box-pose-by-sift :calib-offset t)
  (jaxon-maai-hosei-by-go-pos *apc-box*)
  )

(defun jaxon-box-okkake-push-demo (&key (push-distance 0.5))
  (warn ";; 1 kai~%")
  (jaxon-apc-box-okkake)
  (unix::sleep 2)
  (warn ";; 2 kai~%")
  (jaxon-apc-box-okkake)
  (unix::sleep 2)
  (warn ";; 3 kai~%")
  (jaxon-apc-box-okkake)
  (unix::sleep 2)
  (warn ";; (jaxon-push-main-all :push-distance ~a)~%" push-distance)
  (jaxon-push-main-all :push-distance push-distance)
  )

(warn "~%~%")
(warn ";; Servo On with Reset Landing Pose (from dashboard)~%")
(warn "(make-jaxon-ri)~%")
(warn "(start-auto-balancer-no-fix)~%")
(warn ";; remove ForceSensorOffset (from dashboard)~%")
(warn ";; chakuchi~%")
(warn ";; reset-pose (from dashboard)~%")
(warn ";; start Stabilizer (from dashboard)~%")
(warn "~%")
(warn "(jaxon-apc-box-init) ;; For jaxon initialize~%")
(warn "(jaxon-apc-box-reach-side) ;; Adjust and determine real box position for jaxon reaching~%")
(warn "~%")
(warn "(loop-update-box-pose :calib-offset t) ;; Loop update box pos before calib~%")
(warn "(start-calib-box-pos) ;; Calibrate box pose: Get value *calib-offset-coords*~%")
(warn "(loop-update-box-pose :calib-offset t) ;; Loop update box pos after calib~%")
(warn "~%")
(warn "(jaxon-apc-box-okkake) ;; sift recognition and go-pos~%")
(warn "(jaxon-push-main-all :push-distance 0.5) ;; reach and push 0.5[m] and release for box~%")
(warn "(jaxon-box-okkake-push-demo :push-distance 0.5) ;; sift recognition and go-pos for 3 times, then reach and push 0.5[m] and release for box~%")
