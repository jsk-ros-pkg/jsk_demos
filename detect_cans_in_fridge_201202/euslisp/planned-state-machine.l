(setq *sm* '#s(state-machine plist nil nodes (#18=#s(state plist ((:name . "goal0")) arc-list nil action nil remap-list nil) #1=#s(state plist ((:name . "(find-object fridge)")) arc-list (#s(transition plist nil from #1# to #2=#s(state plist ((:name . "(look-around)   ")) arc-list (#s(transition plist nil from #2# to #2# cost 1 value nil testfunc #3=#s(compiled-code codevector 0 quotevector nil type 0 entry 1091564)) #s(transition plist ((:name . t)) from #2# to #1# cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'look-around 'nil)) remap-list nil) cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #1# to #4=#s(state plist ((:name . "(approach-to fridge)")) arc-list (#s(transition plist nil from #4# to #2# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #4# to #5=#s(state plist ((:name . "(open-door fridge)")) arc-list (#s(transition plist nil from #5# to #5# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #5# to #6=#s(state plist ((:name . "(find-object can) ")) arc-list (#s(transition plist nil from #6# to #7=#s(state plist ((:name . "(look-around)")) arc-list (#s(transition plist nil from #7# to #7# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #7# to #6# cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'look-around 'nil)) remap-list nil) cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #6# to #8=#s(state plist ((:name . "(approach-to can) ")) arc-list (#s(transition plist nil from #8# to #9=#s(state plist ((:name . "(look-around)  ")) arc-list (#s(transition plist nil from #9# to #9# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #9# to #10=#s(state plist ((:name . "(find-object can)")) arc-list (#s(transition plist nil from #10# to #9# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #10# to #11=#s(state plist ((:name . "(approach-to can)")) arc-list (#s(transition plist nil from #11# to #9# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #11# to #12=#s(state plist ((:name . "(grasp-object can)")) arc-list (#s(transition plist nil from #12# to #12# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #12# to #13=#s(state plist ((:name . "(close-door fridge)")) arc-list (#s(transition plist nil from #13# to #13# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #13# to #14=#s(state plist ((:name . "(find-object table)")) arc-list (#s(transition plist nil from #14# to #15=#s(state plist ((:name . "(look-around) ")) arc-list (#s(transition plist nil from #15# to #15# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #15# to #14# cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'look-around 'nil)) remap-list nil) cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #14# to #16=#s(state plist ((:name . "(approach-to table)")) arc-list (#s(transition plist nil from #16# to #15# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #16# to #17=#s(state plist ((:name . "(place-object can)")) arc-list (#s(transition plist nil from #17# to #17# cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #17# to #18# cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'place-object '(can))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'approach-to '(table))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'find-object '(table))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'close-door '(fridge))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'grasp-object '(can))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'approach-to '(can))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'find-object '(can))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'look-around 'nil)) remap-list nil) cost 1 value nil testfunc #3#) #s(transition plist ((:name . t)) from #8# to #12# cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'approach-to '(can))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'find-object '(can))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'open-door '(fridge))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'approach-to '(fridge))) remap-list nil) cost 1 value t testfunc #3#)) action (lambda-closure nil 0 0 (x) (apply 'find-object '(fridge))) remap-list nil) #4# #5# #6# #8# #12# #13# #14# #16# #17# #2# #9# #10# #11# #15# #7#) start-state #19=(#1#) goal-state (#18#) active-state #19# arg-keys nil parallel-action-p nil parallel-exec-result nil parallel-trans-test nil))
